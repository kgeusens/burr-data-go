package burrutils

type rotation_t [9]int

var rotations [24]rotation_t = [24]rotation_t{
	{1, 0, 0, 0, 1, 0, 0, 0, 1},
	{1, 0, 0, 0, 0, -1, 0, 1, 0},
	{1, 0, 0, 0, -1, 0, 0, 0, -1},
	{1, 0, 0, 0, 0, 1, 0, -1, 0},
	{0, 0, -1, 0, 1, 0, 1, 0, 0},
	{0, -1, 0, 0, 0, -1, 1, 0, 0},
	{0, 0, 1, 0, -1, 0, 1, 0, 0},
	{0, 1, 0, 0, 0, 1, 1, 0, 0},
	{-1, 0, 0, 0, 1, 0, 0, 0, -1},
	{-1, 0, 0, 0, 0, -1, 0, -1, 0},
	{-1, 0, 0, 0, -1, 0, 0, 0, 1},
	{-1, 0, 0, 0, 0, 1, 0, 1, 0},
	{0, 0, 1, 0, 1, 0, -1, 0, 0},
	{0, 1, 0, 0, 0, -1, -1, 0, 0},
	{0, 0, -1, 0, -1, 0, -1, 0, 0},
	{0, -1, 0, 0, 0, 1, -1, 0, 0},
	{0, -1, 0, 1, 0, 0, 0, 0, 1},
	{0, 0, 1, 1, 0, 0, 0, 1, 0},
	{0, 1, 0, 1, 0, 0, 0, 0, -1},
	{0, 0, -1, 1, 0, 0, 0, -1, 0},
	{0, 1, 0, -1, 0, 0, 0, 0, 1},
	{0, 0, -1, -1, 0, 0, 0, 1, 0},
	{0, -1, 0, -1, 0, 0, 0, 0, -1},
	{0, 0, 1, -1, 0, 0, 0, -1, 0}}

func Rotate(x, y, z, rot int) (rx, ry, rz int) {
	rotmat := rotations[rot]
	rx = x*rotmat[0] + y*rotmat[1] + z*rotmat[2]
	ry = x*rotmat[3] + y*rotmat[4] + z*rotmat[5]
	rz = x*rotmat[6] + y*rotmat[7] + z*rotmat[8]
	return
}

func Translate(x, y, z, dx, dy, dz int) (rx, ry, rz int) {
	rx = x + dx
	ry = y + dy
	rz = z + dz
	return
}
